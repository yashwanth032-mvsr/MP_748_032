mport yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import talib
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Step 1: Download Stock Data
def download_stock_data(symbol, start_date, end_date):
    stock_data = yf.download(symbol, start=start_date, end=end_date)
    return stock_data

# Step 2: Prepare Data (Feature Engineering with TA-Lib for technical indicators)
def prepare_data(stock_data):
    # Calculate technical indicators using TA-Lib
    stock_data['SMA_50'] = talib.SMA(stock_data['Close'], timeperiod=50)
    stock_data['SMA_200'] = talib.SMA(stock_data['Close'], timeperiod=200)
    stock_data['EMA_12'] = talib.EMA(stock_data['Close'], timeperiod=12)
    stock_data['EMA_26'] = talib.EMA(stock_data['Close'], timeperiod=26)
    stock_data['RSI'] = talib.RSI(stock_data['Close'], timeperiod=14)
   
    # Drop rows with missing values (caused by technical indicators)
    stock_data = stock_data.dropna()
   
    # Select relevant features (technical indicators and price)
    features = ['Close', 'SMA_50', 'SMA_200', 'EMA_12', 'EMA_26', 'RSI']
   
    return stock_data[features]

# Step 3: Normalize Data
def normalize_data(data):
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)
    return scaled_data, scaler

# Step 4: Prepare Data for LSTM (Sliding Window Technique)
def prepare_lstm_data(data, time_step=60):
    X, y = [], []
    for i in range(time_step, len(data)):
        X.append(data[i-time_step:i])
        y.append(data[i, 0])  # Predict the closing price (first column in data)
    return np.array(X), np.array(y)

# Step 5: Build and Train the LSTM Model
def build_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(LSTM(units=50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(units=1))  # Output layer
   
    model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')
    return model

# Step 6: Train Model and Make Predictions
def train_lstm_model(X_train, y_train, X_test, y_test, epochs=10, batch_size=32):
    model = build_lstm_model(X_train.shape[1:])
   
    # Train the model
    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, validation_data=(X_test, y_test))
   
    # Predict on test data
    y_pred = model.predict(X_test)
   
    return model, y_pred

# Step 7: Evaluate the Model
def evaluate_model(y_test, y_pred):
    # Calculate Mean Absolute Error and Root Mean Squared Error
    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
   
    print(f'Mean Absolute Error (MAE): {mae}')
    print(f'Root Mean Squared Error (RMSE): {rmse}')

# Step 8: Plot Results
def plot_results(stock_data, y_test, y_pred, scaler):
    # Inverse transform predictions and actual values
    y_test_actual = scaler.inverse_transform(np.column_stack((y_test, np.zeros(len(y_test)))))
    y_pred_actual = scaler.inverse_transform(np.column_stack((y_pred, np.zeros(len(y_pred)))))
   
    # Plot actual vs predicted values
    plt.figure(figsize=(12, 6))
    plt.plot(stock_data.index[-len(y_test):], y_test_actual[:, 0], label='Actual', color='blue')
    plt.plot(stock_data.index[-len(y_test):], y_pred_actual[:, 0], label='Predicted', color='red')
    plt.title('Stock Price Prediction with LSTM')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.show()

# Main execution
if __name__ == "__main__":
    # Specify the stock symbol and date range
    symbol = 'AAPL'  # Apple Inc.
    start_date = '2010-01-01'
    end_date = '2025-01-01'

    # Download stock data
    stock_data = download_stock_data(symbol, start_date, end_date)

    # Prepare and process data
    stock_data = prepare_data(stock_data)
    scaled_data, scaler = normalize_data(stock_data)

    # Split data into training and testing sets (80% training, 20% testing)
    train_size = int(len(scaled_data) * 0.8)
    train_data = scaled_data[:train_size]
    test_data = scaled_data[train_size:]

    # Prepare data for LSTM (sliding window)
    time_step = 60
    X_train, y_train = prepare_lstm_data(train_data, time_step)
    X_test, y_test = prepare_lstm_data(test_data, time_step)

    # Reshape X to be 3D (samples, time_steps, features)
    X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2])
    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2])

    # Train LSTM model and make predictions
    model, y_pred = train_lstm_model(X_train, y_train, X_test, y_test, epochs=10, batch_size=32)

    # Evaluate the model
    evaluate_model(y_test, y_pred)

    # Plot the results
    plot_results(stock_data, y_test, y_pred, scaler)

